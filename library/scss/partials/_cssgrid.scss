/******************************************************************
Site Name:
Author:

Stylesheet: Grid Stylesheet

******************************************************************/

// Flexbox fallback for IE10 and Edge
.container {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

// Let's target browsers who support the latest CSS Grid spec only
// (!) don't use @supports(display: grid) {} as this will still return true for IE10 and Edge
@supports( grid-area: auto ) {

    /**
    * Grid defaults. 
    * If you don't want to use CSS Grid, remove the .grid class 
    * from #container in header.php
    * 
    */
    .grid {
        display: grid;
        margin: 0 auto;
        width: 100%;
        height: 100vh; // set to be full viewport height; remove if you need to
        grid-gap: 12px; // this is the gutter for both columns and rows

        // add colors just to show what's going on. Comment the colors out when you've sorted your layouts.
        #content {
            flex: 1; // fallback
            background-color: ghostwhite;
        }
        aside {
            background-color: honeydew;
            min-height: 80px; // just to make sure it is visible on mobile; 
        }
        #footer {
            background-color: $dark-black;
        }
    }

    .grid-aside {
        grid-template-rows: auto 1fr auto;
    }
    
    // Base media queries on layouts, not devices:
    // https://www.smashingmagazine.com/2018/02/media-queries-responsive-design-2018/
    // Let's use a simple base 12 grid.
    @media only screen and (min-width: 768px) {
        
        .grid-aside {
            // create 12 equal columns of 1fr unit. Simple.
            grid-template-columns: repeat(12, minmax(0, 1fr));
            // create 3 rows: header | content/aside | footer; 'auto' makes header and footer the height of the content
            grid-template-rows: auto 1fr auto;
            // make the header and footer span the full width
            #header, #footer {
                grid-column: span 12;
            }

            // span our main content from columns 1-8 (8 is the start of the new column)
            #content {
                grid-column: 1/8;
            }
            // span our aside from columns 8-12 (can use 12 or -1 for the second value; -1 is the end of the grid)
            aside {
                grid-column: 8/-1;
            }
        }

        // grid for full-width page
        .grid-full {
            // create 12 columns of 1fr unit. Simple.
            grid-template-columns: repeat(12, minmax(0, 1fr));
            // create 3 rows: header | content/aside | footer; 'auto' makes header and footer the height of the content
            grid-template-rows: auto 1fr auto;
            // make the header and footer span the full width
            #header, #footer {
                grid-column: span 12;
            }
            #content {
                grid-column: 1/-1;
            }
            aside {
                display: none;
            }
        }
    } // end of media query

    @media only screen and (min-width: 1170px)   {

        .grid-aside {
            // adjust the grid areas for higher viewports, keeping the content at manageable widths
            #content {
                grid-column: 2/8;
            }
            aside {
                grid-column: 8/12;
            }
        }

        .grid-full {
            #content {
                grid-column: 0/12;
            }
        }
        
    } // end of media query

    @media only screen and (min-width: 1600px)   {

        .grid-aside {
            // adjust the grid areas for higher viewports, keeping the content at manageable widths
            #content {
                grid-column: 3/8;
            }
            aside {
                grid-column: 8/11;
            }
        }

        .grid-full {
            #content {
                grid-column: 0/12;
            }
        }
        
    } // end of media query

    

}

/**
 * 
 * Other CSS Grid examples
 * 
 * You can use these or come up with your own. Once CSS Grid clicks,
 * it's really easy and there's no limit to what you can do!
 * 
 * The main takeaway here is that you don't need a predefined system.
 * Just define a grid, add your columns and rows, and go.
 * 
 * Uncomment to use.
 * 
 * */

// grid for page with sidebar
// .grid-aside {
//     grid-template-columns: 2fr 1fr; // two columns: 2/3 | 1/3
//     grid-template-rows: auto 1fr auto; // 3 rows: header | content/sidebar | footer
//     #header, #footer {
//         grid-column: span 2; // make the header and footer span the full width
//     }
// }

// grid for sidebar page using grid template areas
// If you use template areas, you probably don't want a base 12 grid.
// .grid-aside {
//     grid-template-columns: 2fr 1fr; // two columns: 2/3 | 1/3
//     grid-template-rows: auto 1fr auto; // 3 rows: header | content/sidebar | footer
//     grid-template-areas: // assign our grid template areas
//             "header header"
//             "content aside"
//             "footer footer";
            
//     // This is a perfect time to use ids in our markup and target them here.
//     #header {
//         grid-area: header;
//     }
//     #content {
//         grid-area: content;
//     }
//     aside {
//         grid-area: aside;
//     }
//     #footer {
//         grid-area: footer;
//     }
// }